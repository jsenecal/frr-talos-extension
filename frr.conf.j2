! FRR Configuration with Multiple Peer Support
! No environment variables required - all config from YAML

! BFD Configuration
bfd
{% if bfd.profiles is defined %}
{% for profile_name, profile in bfd.profiles.items() %}
 profile {{ profile_name }}
  detect-multiplier {{ profile.detect_multiplier | default(3) }}
  receive-interval {{ profile.receive_interval | default(300) }}
  transmit-interval {{ profile.transmit_interval | default(300) }}
{% if profile.echo_mode is defined and profile.echo_mode %}
  echo-mode
{% if profile.echo_interval is defined %}
  echo-interval {{ profile.echo_interval }}
{% endif %}
{% endif %}
 exit
 !
{% endfor %}
{% endif %}
exit
!

! BGP Configuration for Cilium peering (VRF)
router bgp {{ bgp.cilium.local_asn }}{% if bgp.cilium.namespace %} vrf {{ bgp.cilium.namespace }}{% endif %}

 bgp router-id {{ bgp.upstream.router_id }}
 no bgp ebgp-requires-policy
 no bgp default ipv4-unicast

 ! Cilium peer configuration
 neighbor {{ bgp.cilium.peering.ipv4.remote }} remote-as {{ bgp.cilium.remote_asn }}
 neighbor {{ bgp.cilium.peering.ipv4.remote }} description Cilium-BGP-Control-Plane
 neighbor {{ bgp.cilium.peering.ipv4.remote }} passive
{% if bfd.cilium_peering is defined and bfd.cilium_peering.enabled %}
 neighbor {{ bgp.cilium.peering.ipv4.remote }} bfd
{% if bfd.cilium_peering.profile is defined %}
 neighbor {{ bgp.cilium.peering.ipv4.remote }} bfd profile {{ bfd.cilium_peering.profile }}
{% endif %}
{% endif %}

 address-family ipv4 unicast
  neighbor {{ bgp.cilium.peering.ipv4.remote }} activate
  neighbor {{ bgp.cilium.peering.ipv4.remote }} route-map denymap out
 exit-address-family

{% if bgp.cilium.peering.ipv6 is defined %}
 neighbor {{ bgp.cilium.peering.ipv6.remote }} remote-as {{ bgp.cilium.remote_asn }}
 neighbor {{ bgp.cilium.peering.ipv6.remote }} description Cilium-BGP-Control-Plane-IPv6
 neighbor {{ bgp.cilium.peering.ipv6.remote }} passive
{% if bfd.cilium_peering is defined and bfd.cilium_peering.enabled %}
 neighbor {{ bgp.cilium.peering.ipv6.remote }} bfd
{% if bfd.cilium_peering.profile is defined %}
 neighbor {{ bgp.cilium.peering.ipv6.remote }} bfd profile {{ bfd.cilium_peering.profile }}
{% endif %}
{% endif %}

 address-family ipv6 unicast
  neighbor {{ bgp.cilium.peering.ipv6.remote }} activate
  neighbor {{ bgp.cilium.peering.ipv6.remote }} route-map denymap_v6 out
 exit-address-family
{% endif %}
!

! BGP Configuration for upstream fabric peering
router bgp {{ bgp.upstream.local_asn }}
 bgp router-id {{ bgp.upstream.router_id }}
 no bgp ebgp-requires-policy
 no bgp default ipv4-unicast
 bgp bestpath as-path multipath-relax

{% if bgp.upstream.peers is defined %}
{% for peer in bgp.upstream.peers %}
 ! Peer: {{ peer.description | default(peer.address) }}
 neighbor {{ peer.address }} remote-as {{ peer.remote_asn }}
{% if peer.description is defined %}
 neighbor {{ peer.address }} description {{ peer.description }}
{% endif %}
{% if peer.password is defined and peer.password != "no" %}
 neighbor {{ peer.address }} password {{ peer.password }}
{% endif %}
{% if peer.timers is defined %}
 neighbor {{ peer.address }} timers {{ peer.timers.keepalive | default(10) }} {{ peer.timers.hold | default(30) }}
{% endif %}
{% if peer.bfd is defined and peer.bfd.enabled %}
 neighbor {{ peer.address }} bfd
{% if peer.bfd.profile is defined %}
 neighbor {{ peer.address }} bfd profile {{ peer.bfd.profile }}
{% endif %}
{% endif %}
{% if peer.multihop is defined %}
 neighbor {{ peer.address }} ebgp-multihop {{ peer.multihop }}
{% endif %}
{% if peer.update_source is defined %}
 neighbor {{ peer.address }} update-source {{ peer.update_source }}
{% endif %}
{% endfor %}
{% endif %}

 ! Address families
 address-family ipv4 unicast
{% if bgp.upstream.peers is defined %}
{% for peer in bgp.upstream.peers %}
{% if peer.address_family is not defined or peer.address_family == 'ipv4' %}
  neighbor {{ peer.address }} activate
{% if peer.route_map_in is defined %}
  neighbor {{ peer.address }} route-map {{ peer.route_map_in }} in
{% endif %}
{% if peer.route_map_out is defined %}
  neighbor {{ peer.address }} route-map {{ peer.route_map_out }} out
{% elif peer.advertise_networks is defined and peer.advertise_networks %}
  ! Using automatic route-map for network advertisements
  neighbor {{ peer.address }} route-map ADVERTISE_{{ loop.index }} out
{% endif %}
{% if peer.prefix_list_in is defined %}
  neighbor {{ peer.address }} prefix-list {{ peer.prefix_list_in }} in
{% endif %}
{% if peer.prefix_list_out is defined %}
  neighbor {{ peer.address }} prefix-list {{ peer.prefix_list_out }} out
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if bgp.upstream.networks is defined and bgp.upstream.networks.ipv4 is defined %}
{% for network in bgp.upstream.networks.ipv4 %}
  network {{ network }}
{% endfor %}
{% endif %}
  redistribute connected route-map loopbacks
  import vrf {{ bgp.cilium.namespace }}
 exit-address-family

 address-family ipv6 unicast
{% if bgp.upstream.peers is defined %}
{% for peer in bgp.upstream.peers %}
{% if peer.address_family == 'ipv6' %}
  neighbor {{ peer.address }} activate
{% if peer.route_map_in is defined %}
  neighbor {{ peer.address }} route-map {{ peer.route_map_in }} in
{% endif %}
{% if peer.route_map_out is defined %}
  neighbor {{ peer.address }} route-map {{ peer.route_map_out }} out
{% elif peer.advertise_networks is defined and peer.advertise_networks %}
  ! Using automatic route-map for network advertisements
  neighbor {{ peer.address }} route-map ADVERTISE_V6_{{ loop.index }} out
{% endif %}
{% if peer.prefix_list_in is defined %}
  neighbor {{ peer.address }} prefix-list {{ peer.prefix_list_in }} in
{% endif %}
{% if peer.prefix_list_out is defined %}
  neighbor {{ peer.address }} prefix-list {{ peer.prefix_list_out }} out
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if bgp.upstream.networks is defined and bgp.upstream.networks.ipv6 is defined %}
{% for network in bgp.upstream.networks.ipv6 %}
  network {{ network }}
{% endfor %}
{% endif %}
  redistribute connected route-map loopbacks
  import vrf {{ bgp.cilium.namespace }}
 exit-address-family
!

! Route maps and prefix lists
ip prefix-list denyall seq 10 deny 0.0.0.0/0
!
ipv6 prefix-list denyall_v6 seq 10 deny ::/0
!
{% if route_filters is defined %}
! Custom prefix lists
{% if route_filters.prefix_lists is defined %}
{% if route_filters.prefix_lists.ipv4 is defined %}
{% for pl_name, pl_config in route_filters.prefix_lists.ipv4.items() %}
! IPv4 Prefix List: {{ pl_name }}
{% for rule in pl_config.rules %}
ip prefix-list {{ pl_name }} seq {{ rule.seq }} {{ rule.action }} {{ rule.prefix }}{% if rule.ge is defined %} ge {{ rule.ge }}{% endif %}{% if rule.le is defined %} le {{ rule.le }}{% endif %}

{% endfor %}
!
{% endfor %}
{% endif %}
{% if route_filters.prefix_lists.ipv6 is defined %}
{% for pl_name, pl_config in route_filters.prefix_lists.ipv6.items() %}
! IPv6 Prefix List: {{ pl_name }}
{% for rule in pl_config.rules %}
ipv6 prefix-list {{ pl_name }} seq {{ rule.seq }} {{ rule.action }} {{ rule.prefix }}{% if rule.ge is defined %} ge {{ rule.ge }}{% endif %}{% if rule.le is defined %} le {{ rule.le }}{% endif %}

{% endfor %}
!
{% endfor %}
{% endif %}
{% endif %}
! Custom route maps
{% if route_filters.route_maps is defined %}
{% for rm_name, rm_config in route_filters.route_maps.items() %}
! Route Map: {{ rm_name }}
{% for rule in rm_config.rules %}
route-map {{ rm_name }} {{ rule.action }} {{ rule.seq }}
{% if rule.match is defined %}
{% if rule.match.prefix_list is defined %}
 match {% if rule.match.address_family == 'ipv6' %}ipv6{% else %}ip{% endif %} address prefix-list {{ rule.match.prefix_list }}
{% endif %}
{% if rule.match.as_path is defined %}
 match as-path {{ rule.match.as_path }}
{% endif %}
{% if rule.match.community is defined %}
 match community {{ rule.match.community }}
{% endif %}
{% if rule.match.interface is defined %}
 match interface {{ rule.match.interface }}
{% endif %}
{% endif %}
{% if rule.set is defined %}
{% if rule.set.local_preference is defined %}
 set local-preference {{ rule.set.local_preference }}
{% endif %}
{% if rule.set.metric is defined %}
 set metric {{ rule.set.metric }}
{% endif %}
{% if rule.set.weight is defined %}
 set weight {{ rule.set.weight }}
{% endif %}
{% if rule.set.as_path_prepend is defined %}
 set as-path prepend {{ rule.set.as_path_prepend }}
{% endif %}
{% if rule.set.community is defined %}
 set community {{ rule.set.community }}{% if rule.set.community_additive is defined and rule.set.community_additive %} additive{% endif %}

{% endif %}
{% if rule.set.src is defined %}
 set src {{ rule.set.src }}
{% endif %}
{% endif %}
!
{% endfor %}
{% endfor %}
{% endif %}
{% endif %}
route-map denymap permit 1
 match ip address prefix-list denyall
!
route-map denymap_v6 permit 1
 match ipv6 address prefix-list denyall_v6
!
route-map SETSRC permit 10
 set src {{ bgp.upstream.router_id }}
!
{% if bgp.upstream.router_id_v6 is defined %}
route-map SETSRC_V6 permit 10
 set src {{ bgp.upstream.router_id_v6 }}
!
{% endif %}
route-map loopbacks permit 10
  match interface lo
!
route-map loopbacks permit 20
  match interface dummy0
!
route-map loopbacks permit 30
  match interface dummy1
!
ip protocol bgp route-map SETSRC
{% if bgp.upstream.router_id_v6 is defined %}
ipv6 protocol bgp route-map SETSRC_V6
{% endif %}
!
{% if bgp.upstream.peers is defined %}
! Auto-generated route-maps and prefix-lists for network advertisements
{% for peer in bgp.upstream.peers %}
{% if peer.advertise_networks is defined and peer.advertise_networks %}
{% if peer.address_family is not defined or peer.address_family == 'ipv4' %}
! IPv4 prefix-list for peer {{ peer.address }}
{% for network in peer.advertise_networks %}
{% if ':' not in network %}
{% set prefix_len = network.split('/')[-1] %}
ip prefix-list NETS_{{ loop.index }} seq {{ 10 + loop.index * 10 }} permit {{ network }} ge {{ prefix_len }} le 32
{% endif %}
{% endfor %}
!
! IPv4 route-map for peer {{ peer.address }}
route-map ADVERTISE_{{ loop.index }} permit 10
 match ip address prefix-list NETS_{{ loop.index }}
{% if peer.advertise_set is defined %}
{% if peer.advertise_set.local_preference is defined %}
 set local-preference {{ peer.advertise_set.local_preference }}
{% endif %}
{% if peer.advertise_set.metric is defined %}
 set metric {{ peer.advertise_set.metric }}
{% endif %}
{% if peer.advertise_set.as_path_prepend is defined %}
 set as-path prepend {{ peer.advertise_set.as_path_prepend }}
{% endif %}
{% if peer.advertise_set.community is defined %}
 set community {{ peer.advertise_set.community }}
{% endif %}
{% endif %}
!
route-map ADVERTISE_{{ loop.index }} deny 20
!
{% elif peer.address_family == 'ipv6' %}
! IPv6 prefix-list for peer {{ peer.address }}
{% for network in peer.advertise_networks %}
{% if ':' in network %}
{% set prefix_len = network.split('/')[-1] %}
ipv6 prefix-list NETS_V6_{{ loop.index }} seq {{ 10 + loop.index * 10 }} permit {{ network }} ge {{ prefix_len }} le 128
{% endif %}
{% endfor %}
!
! IPv6 route-map for peer {{ peer.address }}
route-map ADVERTISE_V6_{{ loop.index }} permit 10
 match ipv6 address prefix-list NETS_V6_{{ loop.index }}
{% if peer.advertise_set is defined %}
{% if peer.advertise_set.local_preference is defined %}
 set local-preference {{ peer.advertise_set.local_preference }}
{% endif %}
{% if peer.advertise_set.metric is defined %}
 set metric {{ peer.advertise_set.metric }}
{% endif %}
{% if peer.advertise_set.as_path_prepend is defined %}
 set as-path prepend {{ peer.advertise_set.as_path_prepend }}
{% endif %}
{% if peer.advertise_set.community is defined %}
 set community {{ peer.advertise_set.community }}
{% endif %}
{% endif %}
!
route-map ADVERTISE_V6_{{ loop.index }} deny 20
!
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
!
line vty
!
log syslog debugging
!